---
- name: 1.1.1.1 Ensure mounting of cramfs filesystems is disabled (Scored)
  copy:
    content: "install cramfs /bin/true"
    dest: /etc/modprobe.d/cramfs.conf
  when:
    - cis_cramfs_disabled | bool

- name: 1.1.1.1 Ensure mounting of cramfs filesystems is disabled (Scored)
  modprobe:
    name: cramfs
    state: absent
  when:
    - cis_cramfs_disabled | bool
    - ansible_virtualization_type != "docker"

- name: 1.1.1.2 Ensure mounting of vFAT filesystems is limited (Not Scored)
  copy:
    content: "install vfat /bin/true"
    dest: /etc/modprobe.d/vfat.conf
  when:
    - cis_vfat_disabled | bool

- name: 1.1.1.2 Ensure mounting of vFAT filesystems is limited (Not Scored)
  modprobe:
    name: vfat
    state: absent
  when:
    - cis_vfat_disabled | bool
    - ansible_virtualization_type != "docker"

- name: 1.1.1.3 Ensure mounting of squashfs filesystems is disabled (Scored)
  copy:
    content: "install squashfs /bin/true"
    dest: /etc/modprobe.d/squashfs.conf
  when:
    - cis_squashfs_disabled | bool

- name: 1.1.1.3 Ensure mounting of squashfs filesystems is disabled (Scored)
  modprobe:
    name: squashfs
    state: absent
  when:
    - cis_squashfs_disabled | bool
    - ansible_virtualization_type != "docker"

- name: 1.1.1.4 Ensure mounting of udf filesystems is disabled (Scored)
  copy:
    content: "install udf /bin/true"
    dest: /etc/modprobe.d/udf.conf
  when:
    - cis_udf_disabled | bool

- name: 1.1.1.4 Ensure mounting of udf filesystems is disabled (Scored)
  modprobe:
    name: udf
    state: absent
  when:
    - cis_udf_disabled | bool
    - ansible_virtualization_type != "docker"

- name: 1.1.2 Ensure /tmp is configured (Scored)
  systemd:
    name: tmp.mount
    state: started
    enabled: yes
  when:
    - cis_tmp_configured | bool

- name: 1.1.3 Ensure nodev option set on /tmp partition (Scored)
  mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},nodev"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_tmp_nodev | bool
    - item.mount == "/tmp"
    - item.options.find(",") >= 0
    - item.options.find("nodev") == -1
  notify:
    - remount /tmp

- name: 1.1.3 Ensure nodev option set on /tmp partition (Scored)
  command: grep nodev /usr/lib/systemd/system/tmp.mount
  register: cis_tmp_nodev
  changed_when: false
  check_mode: no

- name: 1.1.3 Ensure nodev option set on /tmp partition (Scored)
  ini_file:
    path: /usr/lib/systemd/system/tmp.mount
    section: mount
    option: Options
    value: "{{ lookup('ini', 'Options section=mount file=/usr/lib/systemd/system/tmp.mount') }},nodev"
  when:
    - cis_tmp_nodev.stdout | length < 1

- name: 1.1.4 Ensure nosuid option set on /tmp partition (Scored)
  mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},nosuid"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_tmp_nosuid | bool
    - item.mount == "/tmp"
    - item.options.find(",") >= 0
    - item.options.find("nosuid") == -1
  notify:
    - remount /tmp

- name: 1.1.5 Ensure noexec option set on /tmp partition (Scored)
  mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},noexec"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_tmp_noexec | bool
    - item.mount == "/tmp"
    - item.options.find(",") >= 0
    - item.options.find("noexec") == -1
  notify:
    - remount /tmp

- name: 1.1.6 Ensure separate partition exists for /var (Scored)
  shell: mount | grep -E '\s/var\s'
  register: cis_var
  failed_when:
    - cis_var | length != 1
  changed_when: false
  check_mode: no
  when:
    - cis_var_partition | bool

- name: 1.1.7 Ensure separate partition exists for /var/tmp (Scored)
  shell: mount | grep /var/tmp
  register: cis_var_tmp
  failed_when:
    - cis_var_tmp | length != 1
  changed_when: false
  check_mode: no
  when:
    - cis_var_tmp_partition | bool

- name: 1.1.8 Ensure nodev option set on /var/tmp partition (Scored)
  mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},nodev"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_var_tmp_nodev | bool
    - item.mount == "/var/tmp"
    - item.options.find(",") >= 0
    - item.options.find("nodev") == -1
  notify:
    - remount /var/tmp

- name: 1.1.9 Ensure nosuid option set on /var/tmp partition (Scored)
  mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},nosuid"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_var_tmp_nosuid | bool
    - item.mount == "/var/tmp"
    - item.options.find(",") >= 0
    - item.options.find("nosuid") == -1
  notify:
    - remount /var/tmp

- name: 1.1.10 Ensure noexec option set on /var/tmp partition (Scored)
  mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},noexec"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_var_tmp_noexec | bool
    - item.mount == "/var/tmp"
    - item.options.find(",") >= 0
    - item.options.find("noexec") == -1
  notify:
    - remount /var/tmp

- name: 1.1.11 Ensure separate partition exists for /var/log (Scored)
  shell: mount | grep -E '\s/var/log\s'
  register: cis_var_log
  failed_when:
    - cis_var_log | length != 1
  when:
    - cis_var_log_partition | bool

- name: 1.1.12 Ensure separate partition exists for /var/log/audit (Scored)
  shell: mount | grep -E '\s/var/log/audit\s'
  register: cis_var_log_audit
  failed_when:
    - cis_var_log_audit | length != 1
  when:
    - cis_var_log_audit_partition | bool

- name: 1.1.13 Ensure separate partition exists for /home (Scored)
  shell: mount | grep -E '\s/home\s'
  register: cis_home_audit
  failed_when:
    - cis_home_audit | length != 1
  when:
    - cis_home_partition | bool

- name: 1.1.14 Ensure nodev option set on /home partition (Scored)
  mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},nodev"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_home_nodev | bool
    - item.mount == "/home"
    - item.options.find(",") >= 0
    - item.options.find("nodev") == -1
  notify:
    - remount /home

- name: 1.1.15 Ensure nodev option set on /dev/shm partition (Scored)
  mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},nodev"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_dev_shm_nodev | bool
    - item.mount == "/dev/shm"
    - item.options.find(",") >= 0
    - item.options.find("nodev") == -1
  notify:
    - remount /dev/shm

- name: 1.1.16 Ensure nosuid option set on /dev/shm partition (Scored)
  mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},nosuid"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_dev_shm_nosuid | bool
    - item.mount == "/dev/shm"
    - item.options.find(",") >= 0
    - item.options.find("nosuid") == -1
  notify:
    - remount /dev/shm

- name: 1.1.17 Ensure noexec option set on /dev/shm partition (Scored)
  mount:
    name: "{{ item.mount }}"
    src: "{{ item.device }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.options }},noexec"
    state: present
  loop: "{{ ansible_mounts }}"
  loop_control:
    label: "{{ item.mount }}"
  when:
    - cis_dev_shm_noexec | bool
    - item.mount == "/dev/shm"
    - item.options.find(",") >= 0
    - item.options.find("noexec") == -1
  notify:
    - remount /dev/shm

- name: 1.1.18 Ensure nodev option set on removable media partitions (Not Scored)
  shell: mount | grep -E '\s{{ item }}\s' | grep -v nodev
  register: output
  when:
    - cis_removable_media_nodev | bool
  failed_when:
    - output.stdout_lines | length > 0
  changed_when: false
  check_mode: no
  loop: "{{ cis_removable_media_partitions }}"

- name: 1.1.19 Ensure nosuid option set on removable media partitions (Not Scored)
  shell: mount | grep -E '\s{{ item }}\s' | grep -v nosuid
  register: output
  when:
    - cis_removable_media_nosuid | bool
  failed_when:
    - output.stdout_lines | length > 0
  changed_when: false
  check_mode: no
  loop: "{{ cis_removable_media_partitions }}"

- name: 1.1.20 Ensure noexec option set on removable media partitions (Not Scored)
  shell: mount | grep -E '\s{{ item }}\s' | grep -v noexec
  register: output
  when:
    - cis_removable_media_noexec | bool
  failed_when:
    - output.stdout_lines | length > 0
  changed_when: false
  check_mode: no
  loop: "{{ cis_removable_media_partitions }}"

- name: 1.1.21 Ensure sticky bit is set on all world-writable directories (Scored)
  shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null
  when:
    - cis_fix_sticky_bit | bool
  changed_when: false
  check_mode: no
  register: cis_world_writable_directories

- name: 1.1.21 Ensure sticky bit is set on all world-writable directories (Scored)
  file:
    path: "{{ item }}"
    mode: "a+t"
  when:
    - cis_fix_sticky_bit | bool
    - cis_world_writable_directories.stdout | length > 0
  loop: "{{ cis_world_writable_directories.stdout }}"

- name: 1.1.22 Disable Automounting (Scored)
  service:
    name: autofs
    state: stopped
    enabled: true
  when:
    - cis_disable_automount
